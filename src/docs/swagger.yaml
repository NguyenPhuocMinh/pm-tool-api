openapi: 3.0.1
info:
  title: REST API Standard Template
  summary: REST API docs
  description: This is a sample REST API has been produced to allow for easy access to a standard method for documenting a REST API
  termsOfService: http://swagger.io/terms/
  contact:
    name: API Docs
    url: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.1.md
    email: support@example.com
  version: 1.0.0
servers:
  - url: "{protocol}://{host}:{port}{basePath}"
    description: The deployment API Server
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: "8080"
      basePath:
        default: /
## paths
paths:
  /:
    get:
      tags:
        - home
      security:
        - X-Access-Token: []
      summary: Home page
      description: Home page pm tool
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /healths:
    get:
      tags:
        - home
      security: []
      summary: Health check
      description: Health check
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /auth/logins:
    post:
      tags:
        - auth
      security: []
      summary: Login account
      description: Login account pm tool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authLogin"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /auth/logouts:
    post:
      tags:
        - auth
      security:
        - X-Access-Token: []
      summary: Logout account
      description: Logout account pm tool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authLogout"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /auth/whoami:
    post:
      tags:
        - auth
      security:
        - X-Access-Token: []
      summary: Get Whoami
      description: Get whoami pm tool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authWhoami"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /auth/refresh-tokens:
    post:
      tags:
        - auth
      security:
        - X-Access-Token: []
      summary: Refresh token
      description: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authRefreshToken"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /auth/revoke-tokens:
    post:
      tags:
        - auth
      security:
        - X-Access-Token: []
      summary: Revoke token
      description: Revoke token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authRevokeToken"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /organizations:
    get:
      tags:
        - organization
      security: []
      summary: Organization List
      description: Organization List
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - organization
      security: []
      summary: Organization Create
      description: Organization Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/organizationCreate"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /projects:
    get:
      tags:
        - project
      security: []
      summary: project List
      description: project List
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - project
      security: []
      summary: project Create
      description: project Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/organizationCreate"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /roles:
    get:
      tags:
        - role
      security: []
      summary: Role List
      description: Role List
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - role
      security: []
      summary: Role Create
      description: Role Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createRole"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /roles/{id}:
    get:
      tags:
        - role
      security:
        - X-Access-Token: []
      summary: Get role by id
      description: Return item role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of role
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    patch:
      tags:
        - role
      security:
        - X-Access-Token: []
      summary: Update role by id
      description: Return result update role
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateRole"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of role
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - role
      security:
        - X-Access-Token: []
      summary: Delete role by id
      description: Return result delete role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of role
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /roles/{id}/users:
    get:
      tags:
        - role
      security:
        - X-Access-Token: []
      summary: Get users by role id
      description: Return item role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of role
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /roles/{id}/permissions:
    get:
      tags:
        - role
      security:
        - X-Access-Token: []
      summary: Get permissions by role id
      description: Return item role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of role
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /permissions:
    get:
      tags:
        - permission
      security: []
      summary: Permission List
      description: Permission List
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - permission
      security: []
      summary: Permission Create
      description: Permission Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createPermission"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /permissions/{id}:
    get:
      tags:
        - permission
      security:
        - X-Access-Token: []
      summary: Get permission by id
      description: Return item permission
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of permission
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    patch:
      tags:
        - permission
      security:
        - X-Access-Token: []
      summary: Update permission by id
      description: Return result update permission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePermission"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of permission
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - permission
      security:
        - X-Access-Token: []
      summary: Delete permission by id
      description: Return result delete permission
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of permission
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /permissions/{id}/add-roles:
    patch:
      tags:
        - permission
      security:
        - X-Access-Token: []
      summary: Add permission by role id
      description: Return result add role in permission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRoleToPermission"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of permission
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users:
    get:
      tags:
        - user
      security: []
      summary: User List
      description: User List
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - user
      security: []
      summary: User Create
      description: User Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users/{id}:
    get:
      tags:
        - user
      security:
        - X-Access-Token: []
      summary: Get user by id
      description: Return item user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    patch:
      tags:
        - user
      security:
        - X-Access-Token: []
      summary: Update user by id
      description: Return result update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUser"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - user
      security:
        - X-Access-Token: []
      summary: Delete user by id
      description: Return result delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users/{id}/change-password:
    patch:
      tags:
        - user
      security:
        - X-Access-Token: []
      summary: Change password user by id
      description: Return result update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changePassUser"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users/{id}/set-password:
    patch:
      tags:
        - user
      security:
        - X-Access-Token: []
      summary: Set temporary password user by id
      description: Return result update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/setPassUser"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users/{id}/add-roles:
    patch:
      tags:
        - user
      security:
        - X-Access-Token: []
      summary: Add role to user by id
      description: Return result update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRoleToUser"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users/sessions:
    post:
      tags:
        - user-session
      security: []
      summary: User Session Create
      description: User Session Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserSession"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /users/sessions/{id}:
    patch:
      tags:
        - user-session
      security:
        - X-Access-Token: []
      summary: Update user session
      description: Return result update user session
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUserSession"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - user-session
      security:
        - X-Access-Token: []
      summary: Delete user session by id
      description: Return result delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users:
    get:
      tags:
        - notify-user
      security: []
      summary: Notify User List
      description: Notify User List
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Id of user
        - name: _start
          in: query
          schema:
            type: number
        - name: _end
          in: query
          schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users/{id}:
    get:
      tags:
        - notify-user
      security: []
      summary: Get Notify User By Id
      description: Get Notify User By Id
      parameters:
        - name: id
          in: params
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-data:
    get:
      tags:
        - notify-user
      security: []
      summary: Get All Data Notify User
      description: Get All Data Notify User
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Id of user
        - name: isNew
          in: query
          required: true
          schema:
            type: boolean
        - name: _start
          in: query
          schema:
            type: number
        - name: _end
          in: query
          schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-unread:
    get:
      tags:
        - notify-user
      security: []
      summary: Get All Data Unread Notify User
      description: Get All Data Unread Notify User
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Id of user
        - name: _start
          in: query
          schema:
            type: number
        - name: _end
          in: query
          schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-read:
    patch:
      tags:
        - notify-user
      security: []
      summary: Read Notify User
      description: Read Notify User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commonNotifyUserReqBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-reads:
    patch:
      tags:
        - notify-user
      security: []
      summary: Read All Notify User
      description: Read All Notify User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commonNotifyUserReqBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-trash:
    patch:
      tags:
        - notify-user
      security: []
      summary: Remove Notify User To Trash
      description: Remove Notify User To Trash
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commonNotifyUserReqBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-trashes:
    get:
      tags:
        - notify-user
      security: []
      summary: Get All Notify User To Trash
      description: Get All Notify User To Trash
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Id of user
        - name: _start
          in: query
          schema:
            type: number
        - name: _end
          in: query
          schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - notify-user
      security: []
      summary: Remove All Notify User To Trash
      description: Remove All Notify User To Trash
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Id of user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-rollback:
    delete:
      tags:
        - notify-user
      security: []
      summary: Roll Back Notify User From Trash
      description: Roll Back Notify User From Trash
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commonNotifyUserReqBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notify/users-rollbacks:
    delete:
      tags:
        - notify-user
      security: []
      summary: Roll Back All Notify User From Trash
      description: Roll Back All Notify User From Trash
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commonNotifyUserReqBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /notifyTemplates:
    get:
      tags:
        - notify-user
      security:
        - X-Access-Token: []
      summary: Get All Template Notify
      description: Get All Template Notify
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - notify-user
      security: []
      summary: Create Template Notify
      description: Create Template Notify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notifyTemplateReqBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnAuthorization"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

## components
components:
  # security
  securitySchemes:
    X-Access-Token:
      type: apiKey
      name: X-Access-Token
      in: header
  # responses
  responses:
    ServerError:
      description: ServerError
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/commonResponse"
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/commonResponse"
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/commonResponse"
    UnAuthorization:
      description: UnAuthorization
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/commonResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/commonResponse"
  # schemas
  schemas:
    commonResponse:
      type: object
      properties:
        result:
          type: object
          properties: {}
        method:
          type: string
          example: GET/POST/PUT/DELETE/...
        endpoint:
          type: string
          example: /api/v1/...
        name:
          type: string
          example: Return name message
        message:
          type: string
          example: Return message
        description:
          type: string
          example: Return message
        returnCode:
          type: integer
          example: 0/1/...
        statusCode:
          type: integer
          example: 200/400/500/...

    commonProperties:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    ## Auth schema
    authLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    authLogout:
      type: object
      required:
        - email
        - token
        - sessionID
      properties:
        email:
          type: string
        token:
          type: string
        sessionID:
          type: string

    authWhoami:
      type: object
      required:
        - email
      properties:
        email:
          type: string

    authRefreshToken:
      type: object
      required:
        - email
        - sessionID
      properties:
        email:
          type: string
        sessionID:
          type: string

    authRevokeToken:
      type: object
      required:
        - id
        - sessionID
      properties:
        id:
          type: string
        sessionID:
          type: string

    ## Organization schema
    organizationCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          default: organization name
        activated:
          type: boolean
          default: true

    ## Project schema
    projectCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          default: organization name
        startDay:
          type: string
        endDay:
          type: string
        activated:
          type: boolean
          default: true

    ## Role schema
    createRole:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          default: role name
        description:
          type: string

    updateRole:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          default: role name
        description:
          type: string

    ## Permission schema
    createPermission:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          default: role name
        description:
          type: string

    updatePermission:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          default: role name
        description:
          type: string

    addRoleToPermission:
      type: object
      properties:
        availableRoles:
          type: array
          $ref: "#/components/schemas/commonProperties"
        assignedRoles:
          type: array
          $ref: "#/components/schemas/commonProperties"

    ## User schema
    createUser:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    updateUser:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    setPassUser:
      type: object
      required:
        - password
        - passwordConfirm
      properties:
        password:
          type: string
        passwordConfirm:
          type: string

    addRoleToUser:
      type: object
      properties:
        availableRoles:
          type: array
          $ref: "#/components/schemas/commonProperties"
        assignedRoles:
          type: array
          $ref: "#/components/schemas/commonProperties"

    ## UserSession schema
    createUserSession:
      type: object
      required:
        - userID
      properties:
        userID:
          type: string

    commonNotifyUserReqBody:
      type: object
      required:
        - id
      properties:
        id:
          type: string

    notifyTemplateReqBody:
      type: object
      required:
        - topic
        - description
        - content
        - type
      properties:
        topic:
          type: string
        description:
          type: string
        content:
          type: string
        type:
          type: string
        activated:
          type: boolean
