# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gh: circleci/github-cli@2.0
  docker: circleci/docker@2.1.4
  aws-cli: circleci/aws-cli@3.1

parameters:
  nodeVersion:
    description: Version node
    type: string
    default: "14.18.0"

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  ci:
    docker:
      - image: cimg/node:<< pipeline.parameters.nodeVersion >>
    steps:
      # Clone repo on github
      - gh/setup:
          token: APP_GITHUB_TOKEN # get from context env
      - gh/clone:
          repo: $APP_REPO_URL
      - run:
          name: Install Dependencies
          command: npm install
      # Download and cache dependencies
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific package.json checksum
            # when this file is changed, this key will fail
            - v1-dependencies-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-dependencies-
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Run Build Esm
          command: npm run build-esm
      - run:
          name: Run Check Linter
          command: npm run lint:check
      - run:
          name: Run UnitTest
          command: npm run unit:test
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  cd:
    executor: docker/docker
    steps:
      ## Build and push image to docker hub
      - setup_remote_docker
      - checkout
      - docker/check:
          docker-username: APP_DOCKER_USERNAME # get from context env
          docker-password: APP_DOCKER_PASSWORD # get from context env
      - docker/build:
          image: $APP_DOCKER_IMAGE
          tag: $APP_DOCKER_TAG
      - docker/push:
          digest-path: /tmp/digest.txt
          image: $APP_DOCKER_IMAGE
          tag: $APP_DOCKER_TAG
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  deploy:
    executor: docker/docker
    steps:
      - add_ssh_keys:
          fingerprints:
            - $APP_SSH_FINGERPRINT
      - run:
          name: Deploy to EC2
          command: |
            ## SSH to the EC2 ubuntu to deploy
            ssh -o StrictHostKeyChecking=no -v $APP_DEPLOYED_USER@$APP_HOST_NAME \
            ## Add permission for run script
            sudo chmod +x deploy.sh \
            ## Run Script
            ./deploy.sh

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  pipelines:
    jobs:
      # - ci:
      #     context: pm-tool-api-context
      # - cd:
      #     context: pm-tool-api-context
      #     requires:
      #       - ci
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - dev
      - deploy:
          context: pm-tool-api-context
          # requires:
          #   - cd
          filters:
            branches:
              only:
                - master
